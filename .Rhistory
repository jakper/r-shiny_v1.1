shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
typeof {ice}
typeof{ice}
ice
typeof(ice)
shiny::runApp('shiny')
shiny::runApp('shiny')
ice
eval(parse(text = paste0('lm( x1 ~ x2,data =ice)')))
eval(parse(text = paste0('lm( x1 ~ x2+x4+x3,data =ice)')))
eval(parse(text = paste0('lm( ',rt,' ~ x2+x4+x3,data =ice)')))
lm( x1 ~ x2+x4+x3,data =ice)
shiny::runApp('shiny')
lm( x1 ~ x2+x4+x3,data ='ice')
lm( x1 ~ x2+x4+x3,data ='data')
lm( x1 ~ x2+x4+x3,data =data)
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
lm( x1 ~ x2+x4+x3,data =model.frame(ice))
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('shiny')
shiny::runApp('shiny')
which(names(ice)=="x2")
shiny::runApp('shiny')
ice[1,1]
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
ice
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
log(ice)
log(ice[-group])
ice[,-group]
ice[group]
ice(group)
ice[1]
ice[x1]
ice[[x1]]
ice[[1]]
ice[[-1]]
ice[c(-1)]
ice[c(-x1)]
ice[c(-which(group))]
ice[c(-which(ice,group))]
which(ice,x1)
which(x1,ice)
wich(ice,x1)
which(x1,ice)
which(ice,x1)
?which()
which(ice.x1)
which(ice$x1)
which(colnames(ice)=="group")
ice(-c(which(colnames(ice)=="group")))
ice[-c(which(colnames(ice)=="group"))]
log(ice[-c(which(colnames(ice)=="group"))])
a <- ice[-c(which(colnames(ice)=="group"))]
a[is.infinite(y)] <- 0
a[is.infinite(a)] <- 0
a
b <- a[1]
b[is.infinite(b)] <- 0
b <- a[[1]]
b[is.infinite(b)] <- 0
b
a[[1]]
milk
save(milk, file="C:/test.RData")
save(milk, file="C:/Users/Jakob/Dropbox/Stud/5. Sem (WS2014)/Multivariate Statistik/08/test.RData")
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
names(milk)
shiny::runApp('shiny')
shiny::runApp('shiny')
eval(parse(text = paste0('tmp <- lm(X1 ~ X2, data = unclass(milk))')))
tmp
shiny::runApp('shiny')
tmp$coefficients
tmp$coefficients[2]
shiny::runApp('shiny')
eval(parse(text = paste0('ggplot((milk), aes( X1,X2)) + geom_point()  + geom_abline(intercept=',tmp$coefficients[1] ,', slope=',tmp$coefficients[2],' )')))
tmp$coefficients[1]
tmp$coefficients[2]
eval(parse(text = paste0('tmp <- lm(X1 ~ X2, data = unclass(milk))')))
tmp$coefficients[2]
eval(parse(text = paste0('ggplot((milk), aes( X1,X2)) + geom_point()  + geom_abline(intercept=',tmp$coefficients[1] ,', slope=',tmp$coefficients[2],' )')))
eval(parse(text = paste0('ggplot((milk), aes( X1,X2))  + geom_abline(intercept=',tmp$coefficients[1] ,', slope=',tmp$coefficients[2],' )')))
eval(parse(text = paste0('ggplot((milk), aes( X1,X2)) + geom_point()  + geom_abline(intercept=',tmp$coefficients[1] ,', slope=',tmp$coefficients[2],' )')))
shiny::runApp('shiny')
shiny::runApp('shiny')
tmp
tmp$coefficients[which(names(tmp)=='X2')]
which(names(tmp)=='X2')
names(tmp)
tmp$coefficients[which(names(tmp$coefficients)=='X2')]
shiny::runApp('shiny')
log(ice[-c(which(colnames(ice)=="group"))])
a<-log(ice[-c(which(colnames(ice)=="group"))])
for(i in 1:length(a)){
b<- data[i]
b[is.infinite(b)] = 0
data[i]<-b
}
for(i in 1:length(a)){
b<- data[[i]]
b[is.infinite(b)] = 0
data[[i]]<-b
}
for(i in 1:length(names(a))){
b<- data[[i]]
b[is.infinite(b)] = 0
data[[i]]<-b
}
log(milk)
b
a[[1]]
for(i in 1:length(a)){
b = data[[i]]
b[is.infinite(b)] = 0
data[i]<-b
}
for(i in 1:length(a)){
b = a[[i]]
b[is.infinite(b)] = 0
data[i]<-b
}
a
rapply( a, f=function(x) ifelse(is.infinite(x),0,x), how="replace" )
shiny::runApp('shiny')
ice[c(x1,x2)]
ice[c(x1)]
ice[-c(x1)]
ice[-c('x1')]
ice[1]
mtcars[c("mpg", "hp")]
shiny::runApp('shiny')
shiny::runApp('shiny')
lenth(names(ice))
length(names(ice))
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
which(names(ice)=="x2")
which(names(ice)=="x10")
is.integer(which(names(ice)=="x2"))
is.integer(which(names(ice)=="asdf"))
if(which(names(ice)=="x2")>1){hallo <- 'hallo'}
if(which(names(ice)=="x")>1){hallo2 <- 'hallo'}
if(length(which(names(ice)=="x"))>0){hallo2 <- 'hallo'}
if(length(which(names(ice)=="x1"))>0){hallo2 <- 'hallo'}
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
asd <- 0
asd <- ice [1]
asd['x2'] <- ice [2]
asd['x2'] <- ice [6]
shiny::runApp('shiny')
shiny::runApp('shiny')
asd <- ice [2]
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
a <- log(ice)
a <- log(ice[-c('group')])
a <- log(ice[-c(group)])
a <- log(ice[-c(ice$group)])
ice[-c('x1')]
names(ice)
ice[-c('x1','x2')]
subset(ice, select=-c(group))
a <-subset(ice, select=-c(group))
log(a)
rapply( a, f=function(x) ifelse(is.infinite(x),0,x), how="replace" )
b<-rapply( a, f=function(x) ifelse(is.infinite(x),0,x), how="replace" )
c <- as.data.frame(b)
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
a <-subset(ice, select=-c(group))
b<- log(a)
b
b<-rapply( a, f=function(x) ifelse(is.infinite(x),0,x), how="replace" )
b
a
b<- log(a)
c <- rapply( b, f=function(x) ifelse(is.infinite(x),0,x), how="replace" )
c
c <- as.data.frame(c)
c
a
log(a)
c
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
library(mvoutlier); library(robCompositions); library(ggmap); library(sp)
data(meuse)
install.packages(mvoutlier)
install.packages('mvoutlier')
install.packages('robCompositions')
install.packages("robCompositions")
install.packages("ggmap")
data(meuse)
getDataPart('meuse')
data(meuse)
library(sp)
data(meuse)
library(mvoutlier); library(robCompositions); library(ggmap); library(sp)
data(meuse)
## data or not in lat/lon representation, so project to it:
coordinates(meuse) <- c("x", "y")
proj4string(meuse) <- CRS("+init=epsg:28992")
meuse <- spTransform(meuse, CRS("+proj=longlat +datum=WGS84"))
meuse <- data.frame(slot(meuse, "coords"), slot(meuse, "data"))
names(meuse)[1:2] <- c("lon", "lat")
## now the clustering (paritionierend)
meuse$cluster <-  as.factor(kmeans(scale(isomLR(meuse[,3:6])), 4)$cluster)
gmap <- get_googlemap(center=c(median(meuse$lon), median(meuse$lat)), zoom=14)
ggmap(gmap) + geom_point(aes(x=lon, y=lat, colour=cluster,
shape=cluster), data = meuse)
## now the clustering (hierarchical)
meuse$cluster <- hclust(dist(scale(isomLR(meuse[,3:6]))), 4)
gmap <- get_googlemap(center=c(median(meuse$lon), median(meuse$lat)), zoom=14)
ggmap(gmap) + geom_point(aes(x=lon, y=lat, colour=cluster,
shape=cluster), data = meuse)
## variablen clustering
hc <- hclust(dist(t(as.matrix(meuse[,3:6]))))
plot(hc)
library(rgdal)
install.packages('rgdal')
library(rgdal)
library(mvoutlier); library(robCompositions); library(ggmap); library(sp)
data(meuse)
## data or not in lat/lon representation, so project to it:
coordinates(meuse) <- c("x", "y")
proj4string(meuse) <- CRS("+init=epsg:28992")
meuse <- spTransform(meuse, CRS("+proj=longlat +datum=WGS84"))
meuse <- data.frame(slot(meuse, "coords"), slot(meuse, "data"))
names(meuse)[1:2] <- c("lon", "lat")
## now the clustering (paritionierend)
meuse$cluster <-  as.factor(kmeans(scale(isomLR(meuse[,3:6])), 4)$cluster)
gmap <- get_googlemap(center=c(median(meuse$lon), median(meuse$lat)), zoom=14)
ggmap(gmap) + geom_point(aes(x=lon, y=lat, colour=cluster,
shape=cluster), data = meuse)
meuse
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
install.packages("classifly")
library("classifly")
olives_scale<-scale(olives[3:9])
res <- kmeans(olives_scale,3)
res
plot(olives_scale,col=c(1:3)[res$cluster])
autoplot(kmeans(olives_scale,3))
autoplot(olives_scale,col=c(1:3)[res$cluster])
autoplot(olives_scale)
autoplot(res)
plot(res)
plot(res$cluster)
plot(res$centers)
plot(res)
res <- pam(olives_scale,3)
install.packages("cluster")
install.packages("cluster")
library("cluster")
plot(res)
res <- pam(olives_scale,3)
plot(res)
dist(olives_scale)
olives_dist <- dist(olives_scale)
res_single <- hclust(olives_dist, method = "single")
res_complete <- hclust(olives_dist, method = "complete")
res_average <- hclust(olives_dist, method = "average")
cutree(res_single,3)
cutree(res_complete,3)
cutree(res_average,3)
plot(res_single)
plot(res_complete)
View(olives_scale)
View(olives_scale)
plot(hclust(dist(olives_scale)))
plot(hclust(dist(olives_dist)))
plot(hclust(dist(olives_scale)))
plot(hclust(dist(olives_scale)))
ins
install.packages('ggdendrogram')
library('ggdendrogram')
library(ggdendrogram)
version
version
library(ggdendrogram)
install.packages('ggdendrogram')
library(ggdendrogram)
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
install.packages('ggdendrogram')
?hclust
shiny::runApp('shiny')
shiny::runApp('shiny')
library("classifly")
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
tmp <- hclust(olives_dist, method = options$method)
clu <- cutree(tmp,options$numberOfClusters)
tmp <- hclust(olives_dist, method = ward)
clu <- cutree(tmp,3)
tmp <- hclust(olives_dist, method = 'ward')
clu <- cutree(tmp,3)
tmp <- hclust(olives_dist, method = 'ward.D')
clu <- cutree(tmp,3)
plot(clu)
length(olives_dist)
length(olives_scale)
olives_scale
plot(tmp,  hang=-1)
res <- Mclust(olives_scale,3)
install.packages("mclust")
library("mclust")
res <- Mclust(olives_scale,3)
map(res$z)
clu
(res$z)
View(olives_scale)
plot(olives_scale,col=c(1:3)[map(res$z)])
names(olives_scale)
names(olives)
shiny::runApp('shiny')
shiny::runApp('shiny')
ggplot(olives_scale)
ggplot(x)
of <- as.data.frame(olives_scale)
names(of)
plot(olives_scale,col=c(1:3)[map(res$z)])
ggplot((of), aes('palmitoleic','palmitic')) + geom_point() + geom_point(aes(colour = clu))
plot(olives_scale,col=c(1:3)[map(res$z)])
ggplot((of), aes('palmitoleic','palmitic')) + geom_point(aes(colour = clu))
ggplot((of), aes('palmitic','palmitoleic')) + geom_point()
of
plot(olives_scale,col=c(1:3)[map(res$z)])
ggplot((of)) + geom_point()
ggplot((of), aes('palmitic','palmitoleic')) + geom_point()
diamonds
ggplot(data=diamonds, aes(x=carat, fill=clarity)) + geom_density(alpha=0.5)
ggplot(data=diamonds, aes(x=carat, colour=clarity)) + geom_freqpoly()
ggplot((of), aes('palmitic','palmitoleic',colour=clu)) + geom_point()
ggplot((of), aes(palmitic,palmitoleic,colour=clu)) + geom_point()
ggplot((of), aes(palmitic,palmitoleic,colour=clu)) + geom_point()  scale_colour_brewer(palette="Set1")
ggplot((of), aes(palmitic,palmitoleic,colour=clu)) + geom_point()  + scale_colour_brewer(palette="Set1")
ggplot((of), aes(palmitic,palmitoleic,colour=clu)) + geom_point() +
scale_colour_gradientn(colours=rainbow(4))
shiny::runApp('shiny')
ggplot((of), aes(palmitoleic,palmitic)) + geom_point(aes(colour = map(res$z))) +     scale_colour_gradientn(colours=rainbow(3))
save(olives,"C:/Users/Jakob/Dropbox/Stud/5. Sem (WS2014)/Multivariate Statistik/08/olives.RData")
save(olives,file="C:/Users/Jakob/Dropbox/Stud/5. Sem (WS2014)/Multivariate Statistik/08/olives.RData")
plot(res_single)
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
save(olives[3:9],file="C:/Users/Jakob/Dropbox/Stud/5. Sem (WS2014)/Multivariate Statistik/08/olives_cut.RData")
asdf <- olives[3:9]
save(asdf,file="C:/Users/Jakob/Dropbox/Stud/5. Sem (WS2014)/Multivariate Statistik/08/olives_cut.RData")
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
hclust(asdf, method = 'single')
hclust(scale(asdf), method = 'single')
sadf
asdf
hclust(dist(scale(asdf)), method = 'single')
hclust(dist((asdf)), method = 'single')
shiny::runApp('shiny')
a <-hclust(dist((asdf)), method = 'single')
ggplot((asdf), aes(palmitoleic,palmitic)) + geom_point(aes(colour = a)) +     scale_colour_gradientn(colours=rainbow(3))
ggplot((asdf), aes(palmitoleic,palmitic))
ggplot((asdf), aes(palmitoleic,palmitic)) + geom_point() +     scale_colour_gradientn(colours=rainbow(3))
asdf
ggplot((of), aes(palmitoleic,palmitic)) + geom_point(aes(colour = map(res$z))) +     scale_colour_gradientn(colours=rainbow(3))
ggplot((olives_scale), aes(palmitoleic,palmitic)) + geom_point(aes(colour = map(res$z))) +     scale_colour_gradientn(colours=rainbow(3))
ggplot((as.data.frame(olives_scale)), aes(palmitoleic,palmitic)) + geom_point(aes(colour = map(res$z))) +     scale_colour_gradientn(colours=rainbow(3))
a
a <- cutree(tmpclust,options$numberOfClusters)
a <- cutree(a,3)
a
Mclust(asdf,3)
g<-Mclust(asdf,3)
ggplot((as.data.frame(olives_scale)), aes(palmitoleic,palmitic)) + geom_point(aes(colour = map(g$z))) +     scale_colour_gradientn(colours=rainbow(3))
g$z
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
ggplot((as.data.frame(olives_scale)), aes(palmitoleic,palmitic)) + geom_point(aes(colour = map(g$z))) +     scale_colour_gradientn(colours=rainbow(3))
ggplot((as.data.frame(olives_scale)), aes(palmitoleic,palmitic)) + geom_point(aes(colour = map(res$z))) +     scale_colour_gradientn(colours=rainbow(3))
shiny::runApp('shiny')
ggplot((as.data.frame(olives_scale)), aes(palmitoleic,palmitic)) + geom_point(aes(colour = map(res$z))) +     scale_colour_gradientn(colours=rainbow('3'))
cutree(tmpclust,'3')
cutree(hclust(olives_scale),'3')
cutree(hclust(olives_dist),'3')
cutree(hclust(olives_dist),"3")
ggplot((as.data.frame(olives_scale)), aes(palmitoleic,palmitic)) + geom_point(aes(colour = map(res$z))) +     scale_colour_gradientn(colours=rainbow('3'))
b <-cutree(hclust(olives_dist),"3")
ggplot((as.data.frame(olives_scale)), aes(palmitoleic,palmitic)) + geom_point(aes(colour = b)) +     scale_colour_gradientn(colours=rainbow('3'))
b <-cutree(hclust(olives_dist, "ward.D"),"3")
shiny::runApp('shiny')
shiny::runApp('shiny')
ggplot((as.data.frame(olives_scale)), aes(palmitoleic,palmitic)) + geom_point(aes(colour = b)) +     scale_colour_gradientn(colours=rainbow('3'))
shiny::runApp('shiny')
b <-cutree(hclust(olives_dist, "ward.D"),"3")
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
ggplot((as.data.frame(olives_scale)), aes(eval('palmitoleic'),palmitic)) + geom_point(aes(colour = b)) +     scale_colour_gradientn(colours=rainbow('3'))
ggplot((as.data.frame(olives_scale)), aes(assign('palmitoleic'),palmitic)) + geom_point(aes(colour = b)) +     scale_colour_gradientn(colours=rainbow('3'))
ggplot((as.data.frame(olives_scale)), aes(paste('palmitoleic'),palmitic)) + geom_point(aes(colour = b)) +     scale_colour_gradientn(colours=rainbow('3'))
ggplot((as.data.frame(olives_scale)), aes(eval('palmitoleic'),palmitic)) + geom_point(aes(colour = b)) +     scale_colour_gradientn(colours=rainbow('3'))
ggplot((as.data.frame(olives_scale)), aes(palmitoleic,palmitic)) + geom_point(aes(colour = b)) +     scale_colour_gradientn(colours=rainbow('3'))
typeof(olives$palmitic)
olives$palmitic
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
b <-cutree(hclust(olives_dist, "ward.D"),3)
shiny::runApp('shiny')
shiny::runApp('shiny')
as.numeric("4")
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
