plot(lm.model2$fitted,rid,cex.lab=1.2,xlab="Fitted values",ylab="Standardised LTS residuals",type="n")
points(lm.model2$fitted[lm.model2$lts.wt==0],rid[lm.model2$lts.wt==0],cex=0.8,pch=3)
points(lm.model2$fitted[lm.model2$lts.wt==1],rid[lm.model2$lts.wt==1],cex=0.8,pch=1)
abline(h=0,col="grey",lty=2)
abline(h=c(-2.5,2.5),lty=3,cex=1.1)
shiny::runApp()
points(lm.model2$fitted[lm.model2$lts.wt==0],rid[lm.model2$lts.wt==0],cex=0.8,pch=3)
lm.model3<-lmrob(mpg~cyl+disp+hp+drat+wt, data=mtcars)
plot(lm.model3, which = "rqq")
plot(lm.model3, which = 1)
plot(lm.model3, which = 2)
plot(lm.model3, which = 3)
plot(lm.model3, which = 4)
plot(lm.model2, which = 4)
plot(lm.model2, which = 1)
plot(lm.model3, which = 1)
plot(lm.model3, which = 2)
plot(lm.model3, which = 3)
ggplot(lm.model, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)+geom_abline(aes(qqline(.stdresid)))+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")+ggtitle("Normal Q-Q")+theme_bw()
plot(lm.model3, which = 3)
plot(lm.model3, which = 2)
ggplot(lm.model, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)+geom_abline(aes(qqline(.stdresid)))+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")+ggtitle("Normal Q-Q")+theme_bw()
plot(lm.model3, which = 2)
ggplot(lm.model, aes(.fitted, .resid))+geom_point() + stat_smooth(method="loess")+geom_hline(yintercept=0, col="red", linetype="dashed") +xlab("Fitted values")+ylab("Residuals")+ggtitle("Residual vs Fitted Plot")+theme_bw()
plot(lm.model3, which = 1)
plot(lm.model3, which = 3)
shiny::runApp()
library(mvoutlier); library(robCompositions); library(ggmap); library(sp)
data(meuse)
## data or not in lat/lon representation, so project to it:
coordinates(meuse) <- c("x", "y")
proj4string(meuse) <- CRS("+init=epsg:28992")
meuse <- spTransform(meuse, CRS("+proj=longlat +datum=WGS84"))
meuse <- data.frame(slot(meuse, "coords"), slot(meuse, "data"))
names(meuse)[1:2] <- c("lon", "lat")
## now the clustering (paritionierend)
meuse$cluster <-  as.factor(kmeans(scale(isomLR(meuse[,3:6])), 4)$cluster)
gmap <- get_googlemap(center=c(median(meuse$lon), median(meuse$lat)), zoom=14)
ggmap(gmap) + geom_point(aes(x=lon, y=lat, colour=cluster,
shape=cluster), data = meuse)
murder <- subset(crime, offense == "murder")
qmplot(lon, lat, data = murder, colour = I(’red’), size = I(3), darken = .3)
install.packages(qmplot)
install_github(qmplot)
install_github('qmplot')
install.packages('qmplot')
df <- round(data.frame(
x = jitter(rep(-95.36, 50), amount = .3),
y = jitter(rep( 29.76, 50), amount = .3)
), digits = 2)
map <- get_googlemap(’houston’, markers = df, path = df, scale = 2)
ggmap(map, extent = ’device’)
> library(ggmap)
> library(mapproj)
> map <- get_map(location = 'Europe', zoom = 4)
> ggmap(map)
library(ggmap)
library(mapproj)
map <- get_map(location = 'Europe', zoom = 4)
ggmap(map)
shiny::runApp()
shiny::runApp()
hc <- hclust(cut_moss)
hc <- hclust(dist(USArrests), "ave")
clustdata <- cutree(hc,3)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(ggbiplot)
data(wine)
wine.pca <- prcomp(wine, scale. = TRUE)
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
wine.pca$x
pr <- prcomp(wine, scale. = TRUE)
data(wine)
wine.pca <- prcomp(wine, scale. = TRUE)
ggbiplot(pr, obs.scale = 1, var.scale = 1,
groups = pr, ellipse = TRUE, circle = TRUE)
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
+          groups = wine.class, ellipse = TRUE, circle = TRUE) +
+     scale_color_discrete(name = '')
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
+          groups = wine.class, ellipse = TRUE, circle = TRUE)   scale_color_discrete(name = '')
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '')
ggbiplot(wine.pca,  groups = wine.class, ellipse = TRUE, circle = TRUE) +  scale_color_discrete(name = '')
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '')
ggbiplot(wine.pca,  groups = wine.class, ellipse = TRUE, circle = TRUE) +  scale_color_discrete(name = '')
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '')
ggbiplot(wine.pca,  groups = wine.class, ellipse = TRUE, circle = TRUE) +  scale_color_discrete(name = '')
ggbiplot(wine.pca) +  scale_color_discrete(name = '')
ggbiplot(wine.pca)
ggbiplot(wine.pca) +  scale_color_discrete(name = '')
ggbiplot(wine.pca, choices 2:3)
ggbiplot(wine.pca, choices =2:3)
wine
wine2 <- wine
wine2.pca
prc <- prcomp(wine, scale. = TRUE)
ggbiplot(prc, obs.scale = 1, var.scale = 1)
pc <- pcaCoDa(wine)
ggbiplot(pc, obs.scale = 1, var.scale = 1)
pc2 <- prc$x
pc2['rotation'] <- prc$rotation
getClass(prc)
pc <- getClass(prc)
pc2$rotation <- prc$rotation
prc$rotation
typeof(prc$rotation)
typeof(prc)
newlist <- list(pr, list(pc))
test1 <- list( c(a='a',b='b',c='c'), c(a='d',b='e',c='f'))
test2 <- as.data.frame(test1)
pc['scores']
pc$scores
pc2<-''
test1[,1]
test1[1,]
test1[]
test1[[1]]
pc2['a'] <- test1[[1]]
prc <- prcomp(wine, scale. = TRUE)
ggbiplot(pc$princompOutputClr, obs.scale = 1, var.scale = 1)
prc <- prcomp(wine, scale. = TRUE)
ggbiplot(pc, obs.scale = 1, var.scale = 1)
prc <- prcomp(wine, scale. = TRUE)
ggbiplot(pc$princompOutputClr, obs.scale = 1, var.scale = 1)
shiny::runApp()
ggbiplot(wine.pca)
ggbiplot(wine.pca)
prc <- prcomp(wine, scale. = TRUE)
ggbiplot(pc$princompOutputClr, obs.scale = 1, var.scale = 1)
screeplot(prc)
screeplot(prc, type = l)
screeplot(prc, type = 'l')
screeplot(pc$princompOutputClr, type = 'l')
ggbiplot(prc, labels =  rownames(prc))
ggbiplot(prc)
pf <- pfa(scale(wine),factors=3,scores="regression",rotation="varimax")
plot(pf)
biplot(pf)
autoplot(pf, data = wine)
ggbiplot(pf)
ggbiplot(pf, data=wine)
ggbiplot(pf, data=wine)+ scale_y_log10()
ggbiplot(pc$princompOutputClr, obs.scale = 1, var.scale = 1)
ggbiplot(pc$princompOutputClr, obs.scale = 1, var.scale = 1) + scale_y_log10()
ggbiplot(pc$princompOutputClr, obs.scale = 1, var.scale = 1)
ggbiplot(pc$princompOutputClr, obs.scale = 1, var.scale = 1) + scale_y_log10()
ggbiplot(pc$princompOutputClr, obs.scale = 1, var.scale = 1, choices =2:3 )
ggplot((wine), aes(Mg,Flav)) + geom_point()
ggplot((temdata), aes( ', options$x ,',',options$y,')) + geom_point() + coord_fixed()
ggplot((wine), aes(Mg,Flav)) + geom_point() + coord_fixed()
ggplot((wine), aes(Mg,Flav)) + geom_point() + coord_fixed(ratio = 1)
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
# With one variable
p + facet_grid(. ~ cyl)
p + facet_grid(cyl ~ .)
p + facet_grid(vs ~ am)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
gemas = read.csv("C:/Users/Jakob/shiny/r-shiny_v1.1/CSV-Files/GEMAS_Ap_MASTERDATAFILEforMapping_05DL_ORI.csv")
View(gemas)
gemas_clr = cenLR(gemas)
install.packages("robCompositions")
load(robCompositions)
load('robCompositions')
library('robCompositions')
gemas_clr = cenLR(gemas)
names(gemas)
gemas[,-c(1:5)]
gemas_clr = cenLR(gemas[,-c(1:5)])
gemas_cut =gemas[,-c(1:5)]
View(gemas_cut)
View(gemas_cut[-c(1:9),])
gemas_clr = gemas_cut[-c(1:9),]
View(gemas_clr)
gemas_clr.clr
gemas_clr = cenLR(gemas_clr)
View(gemas_clr)
gemas_clr = cenLR(gemas_clr[,c(1,2)])
gemas_clr = cenLR(gemas_clr[,c(3)])
gemas_clr = cenLR(gemas_clr[,c(2,3)])
gemas_clr = cenLR(gemas_clr[,c(26:33)])
wine_clr = cenLR(wine)
wine_clr
data.as.frame(wine_clr)
as.data.frame(wine_clr)
wine_clr_frame = wine_clr.clr
wine_clr_frame = wine_clr$x.clr
View(wine_clr_frame)
View(wine)
log(wine)
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
View(x.rsc)
View(temdata)
View(x.rsc)
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('shiny')
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
wine.pca
wine.pca <- pcaCoDa(wine)
wine.pca
wine.pca$scores
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('shiny')
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
wine.pca
wine.prc
wine.prc <- prcomp(wine, scale. = TRUE)
wine.prc
plot.pcaCoDa(wine.pca)
plot(wine.pca)
plot(wine.pca$princompOutputClr)
ggbiplot(wine.pca$princompOutputClr)
test2 <- wine.pca$princompOutputClr$scores
test2 <- wine.pca$scores
test1 <- wine.pca$scores
test2 <- wine.pca$scores
test2 <- wine.pca$princompOutputClr$scores
View(test1)
View(test2)
ggbiplot(wine.pca$princompOutputClr,obs.scale = 1, var.scale = 1,)
plot(wine.pca$princompOutputClr)
plot(wine.pca)
ggbiplot(wine.pca$princompOutputClr, pc.biplot = TRUE)
plot(wine.pca)
ggbiplot(wine.pca$princompOutputClr)
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('shiny')
View(asd)
View(asd)
ggbiplot(wine.pca$princompOutputClr, scale = 0)
wine.pca$princompOutputClr$scores[,1]
min(wine.pca$princompOutputClr$scores[,1])
max(wine.pca$princompOutputClr$scores[,1])
max(wine.pca$princompOutputClr$scores[,2])
min(wine.pca$princompOutputClr$scores[,2])
plot(wine.pca)
min(wine.pca$scores[,1])
shiny::runApp('shiny')
shiny::runApp('shiny')
screeplot(wine.pca$princompOutputClr, type = 'l')
summary(wine.pca)
summary(wine.pca$princompOutputClr)
ggbiplot(wine.pca$princompOutputClr, scale = 0)
ggbiplot(wine.pca$princompOutputClr, scale = 0, labels.size = 3)
ggbiplot(wine.pca$princompOutputClr, scale = 0, labels.size = 5)
ggbiplot(wine.pca$princompOutputClr, scale = 0, labels.size = 10)
ggbiplot(wine.pca$princompOutputClr, scale = 0, labels.size = 100)
ggbiplot(wine.pca$princompOutputClr, scale = 0, labels.size = 1)
ggbiplot(wine.pca$princompOutputClr, scale = 0, labels.size = '1')
ggbiplot(wine.pca$princompOutputClr, scale = 0, labels.size = '5')
ggbiplot(wine.pca$princompOutputClr, scale = 0, labels.size = '3')
shiny::runApp('shiny')
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
wine.pca$princompOutputClr$scale <- rep.int(1, 26)
autoplot(wine.pca$princompOutputClr)
ncol(wine.pca$princompOutputClr$scores)
wine.prc$scale
wine.prc <- pcaCoDa(wine)
wine.pca$princompOutputClr$scale
wine.prc <- prcomp(wine, scale. = TRUE)
ggbiplot(prc, obs.scale = 1, var.scale = 1)
wine.pca <- pcaCoDa(wine)
ggbiplot(pc$princompOutputClr, obs.scale = 1, var.scale = 1)
wine.pca$princompOutputClr$scale
wine.pca$princompOutputClr$center
wine.pca$mult_comp
wine.pca$eigenvalues
wine.pca$princompOutputClr$scale <- wine.prc$scale
wine.pca$princompOutputClr$center <- wine.prc$center
autoplot(wine.pca$princompOutputClr)
library(ellipse)
library(mclust)
library(ggplot2)
iris_mclust=Mclust(iris[,1:4])
get.ellipses <- function(coords, mclust.fit){
centers <- mclust.fit$parameters$mean[coords, ]
vars <- mclust.fit$parameters$variance$sigma[coords, coords, ]
ldply(1:ncol(centers), function(cluster){
data.frame(ellipse(vars[,,cluster], centre = centers[, cluster],
level = 0.5), classification = cluster)
})
}
iris.el <- get.ellipses(c("Sepal.Length", "Sepal.Width"), iris_mclust)
iris$classification <- iris_mclust$classification
ggplot(iris, aes(Sepal.Length, Sepal.Width, colour = factor(classification))) +
geom_point(aes(shape = classification))+
geom_path(data = iris.el,
aes(group = classification, linetype = classification))
library(mclust)
data(diabetes)
mcl = Mclust(diabetes)
mcl
mcl$data
View(diabetes)
mcl$classification
mcl = mclustBIC(diabetes)
mcl = mclustBIC(diabetes[,-c(1)])
mcl
mcl = Mclust(diabetes)
plot(mcl, what = "classification")
wine.pca <- pcaCoDa(wine)
wine.pca$princompOutputClr$scale <- NULL
wine.pca$princompOutputClr
wine.pca$princompOutputClr$n.obs
wine.pca$princompOutputClr$center <- NULL
autoplot(wine.pca$princompOutputClr)
wine.pca <- pcaCoDa(wine)
autoplot(wine.pca$princompOutputClr)
plot(wine.pca$princompOutputClr)
plot(wine.pca)
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select')
shiny::runApp('shiny')
summary(wine.prc)
wine.pfa <- pfa(x, factors=1, covmat="covMcd")
wine.pfa <- pfa(wine, factors=1, covmat="covMcd")
wine.pfa <- pfa(x, factors=2, covmat="cov")
wine.pfa <- pfa(wine, factors=2, covmat="cov")
wine.pfa <- pfa(wine, factors=2, scores="Bartlett")
summary(wine.pfa)
wine.pfa$loadings
wine.pfa$uniquenesses
wine.pfa$criteria
wine.pfa$STATISTIC
wine.pfa$PVAL
wine.pfa$dof
shiny::runApp('shiny')
cut_moss
biplot(wine.pfa)
biplot(wine.pfa$scores,wine.pfa$loadings)
biplot(wine,wine.pfa$loadings)
screeplot(wine.pfa)
screeplot(wine.pfa$loadings)
biplot(wine.pca$princompOutputClr ,choices = 1:2)
biplot(wine.pca$princompOutputClr ,choices = c(4,2))
biplot(wine.pca$princompOutputClr ,choices = c('4','2'))
wine.fac <- factanal(scale(wine),factors=2,scores='regression',rotation='varimax')
wine.pfa <- pfa(wine, factors=2, covmat="cov")
biplot(wine.fac$scores,wine.fac$loadings)
getMethod('biplot')
methods('biplot')
?methods
getAnywhere('biplot')
getAnywhere('biplot.default')
biplot(wine.fac$scores,wine.fac$loadings)
biplot(wine.fac$scores,wine.fac$loadings, choices = c(4,2))
wine.fac <- factanal(scale(wine),factors=4,scores='regression',rotation='varimax')
wine.fac <- factanal(scale(wine),factors=2,scores='regression',rotation='varimax')
wine.fac <- factanal(scale(wine),factors=3,scores='regression',rotation='varimax')
biplot(wine.fac$scores,wine.fac$loadings, choices = c(3,2))
warnings( biplot(wine.fac$scores,wine.fac$loadings, choices = c(3,2)))
getAnywhere(biplot.factanal)
getAnywhere('biplot.factanal')
getAnywhere('biplot')
getAnywhere('biplot')
getAnywhere('biplot.default')
biplot(wine.fac$scores,wine.fac$loadings)
plo <- biplot(wine.fac$scores,wine.fac$loadings)
plo <- biplot(wine.fac$scores,wine.fac$loadings[,c(2,3)])
plo <- biplot(wine.fac$scores,wine.fac$loadings)
biplot(wine.fac$scores,wine.fac$loadings)
biplot(wine.fac$scores,wine.fac$loadings[,c(2,3)])
biplot(wine.fac$scores,wine.fac$loadings[,c(3,2)])
biplot(wine.fac$scores,wine.fac$loadings[,c(3,2)],  xlab='Factor3',  ylab='Fuck')
past('asdf','gh')
past('asdf'+'gh')
paste('as','df')
total <- wine[1]
total <- total[-c(1)]
total<- merge(total,wine, by="row.names")
View(total)
transform(total, Row.names = as.numeric(Row.names))
shiny::runApp('shiny')
shiny::runApp('shiny')
x.mcd=covMcd(wine,cor=TRUE)
x.rsc=scale(wine,x.mcd$cent,sqrt(diag(x.mcd$cov)))
res1=pfa(x.rsc,factors=2,covmat=x.mcd,scores="regression",rotation="varimax",
maxit=0,start=rep(0,ncol(x.rsc)))
cut_moss.fac <- factanal(x.rsc,factors=2,covmat=x.mcd,scores="regression",rotation="varimax")
cut_moss.fac <- factanal(x.rsc,factors=2,covmat=x.mcd,rotation="varimax")
wine.fac <- factanal(x.rsc,factors=2,covmat=x.mcd,scores="regression",rotation="varimax", maxit=0,start=rep(0,ncol(x.rsc)))
?uniroot()
r<-rnorm(4)
r<-rnorm(4)
?chol()
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
wine.lm <- lm(wine$Alcohol~wine$Mg+wine$Ash)
wine.lm <- lm(wine$Alcohol~wine$Mg)
wine.lm$fitted.values
wine.lmrob <- lmrob(wine$Alcohol~wine$Mg)
wine.lmCoDaX <- lmCoDaX(wine$Alcohol~wine$Mg)
data(expendituresEU)
y <- as.numeric(apply(expendituresEU,1,sum))
expendituresEU.lmCoDaX <- lmCoDaX(y, expendituresEU, method="classical")
plot(wine.lm)
plot(wine.lmrob)
plot(expendituresEU.lmCoDaX)
plot(expendituresEU.lmCoDaX$lm)
wine.lm$model
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
asdf <- c(TRUE;TRUE)
asdf <- c(TRUE,TRUE)
if(asdf[1]){}
if(asdf[1]){print('hallo')}
if(asdf[0]){print('hallo')}
if(asdf[2]){print('hallo')}
asdf <- c('TRUE','TRUE')
if(asdf[2]){print('hallo')}
shiny::runApp('shiny')
shiny::runApp('shiny')
x1 <- mvrnorm(20,c(0,0,0),diag(3))
x2 <- mvrnorm(30,c(3,0,0),diag(3))
x3 <- mvrnorm(40,c(0,3,0),diag(3))
X <- rbind(x1,x2,x3)
grp=c(rep(1,20),rep(2,30),rep(3,40))
#par(mfrow=c(1,2))
d1 <- daFisher(X,grp=grp,method="classical",coda=FALSE)
d2 <- daFisher(X,grp=grp,method="robust",coda=FALSE)
d1$mu
d1$coda
d1
plot(d1$scores,pch=grp,col=predict(d1))
plot(d1$scores,pch=grp)
predict(d1)
predict(d1$scores)
install.packages("rrcov")
library(rrcov)
data(hemophilia)
lda <- LdaClassic(gr~., data=hemophilia)
lda_predict <- as.vector(predict(lda)@classification)
lda_predict
predict(lda)
predict(lda)@classification
predict(d2)@classification
lda
predict(d2)@classification
view(hemophilia)
View(cut_moss)
View(hemophilia)
grp
lda_predict
install_github("matthias-da/robCompositions")
install_github("matthias-da/robCompositions")
shiny::runApp('shiny')
shiny::runApp('shiny')
View(wine)
ggplot(data = wine, aes( "Ash" ,"Mg")) + geom_point()
ggplot(data = wine, aes( Ash ,Mg)) + geom_point()
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
wine.lm$residuals
wine.lm$fitted.values
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
install.packages("ggplot2")
library(ggplot2)
library(stringi)
install.packages("stringi")
library(stringi)
library(ggplot2)
shiny::runApp('shiny')
