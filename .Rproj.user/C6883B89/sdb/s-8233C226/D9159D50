{
    "contents" : "library(ggplot2)\nlibrary(Cairo)   # For nicer ggplot2 output when deployed on Linux\nlibrary(ggbiplot)\n\n# We'll use a subset of the mtcars data set, with fewer columns\n# so that it prints nicely\nmtcars2 <- mtcars[, c(\"mpg\", \"cyl\", \"disp\", \"hp\", \"wt\", \"am\", \"gear\")]\ndata(USArrests)\n#tableData() <- USArrests\nui <- fluidPage(\n  selectInput(\"viewTopic\", \"View Topic:\", choices = names, selected = 1),\n  fluidRow(\n    column(width = 4,\n      plotOutput(\"plot1\", height = 600,\n        # Equivalent to: click = clickOpts(id = \"plot_click\")\n        click = \"plot1_click\",\n        brush = brushOpts(\n          id = \"plot1_brush\"\n        )\n      )\n    )\n  ),\n  fluidRow(\n    column(width = 6,\n      h4(\"Points near click\"),\n      dataTableOutput(\"click_info\")\n    ),\n    column(width = 6,\n      h4(\"Brushed points\"),\n      dataTableOutput(\"brush_info\")\n    )\n  ),\n  fluidRow(\n    column(width = 4,\n           plotOutput(\"plot2\", height = 300)\n           )\n    ),\n  downloadButton('downloadData', 'Download table'),\n  selectInput(\"plot_scaletype\", \"Scale type\",\n              c(\"normal\" = \"normal\",\n                \"log10\" = \"log\"\n              ),\n              selectize = FALSE\n  )\n  )\n\n\n\n\n\nserver <- function(input, output) {\n  \n  observe({\n    options <- input$brush_info\n    try <- tryCatch({\n      #x.mcd=covMcd(wine,cor=TRUE) \n      #x.rsc=scale(wine,x.mcd$cent,sqrt(diag(x.mcd$cov))) \n      #tmp=pfa(x.rsc,factors=5,covmat=x.mcd,scores='regression',rotation='varimax')\n      #tmp_data <- as.data.frame(tmp$scores)\n      #total<- merge(wine,tmp_data, by=\"row.names\")\n      #test_5 <- total\n      \n      wine.prc <- prcomp(wine, scale. = TRUE)\n      tmp_data <- as.data.frame(wine.prc$x)\n      total<- merge(wine,tmp_data, by=\"row.names\")\n      \n      wine.pca <- pcaCoDa(wine)\n      tmp_data <- as.data.frame(wine.pca$princompOutputClr$scores)\n      total<- merge(wine,tmp_data, by=\"row.names\")\n      \n      test_5 <- total\n    },\n                    error = function(cond){\n                      asdf <- cond\n                      message(as.character(paste0('Error in  \\n \\n',as.character(cond$message))))\n                      return(NULL)})\n    \n    \n    output$click_info <- renderDataTable({\n      # Because it's a ggplot2, we don't need to supply xvar or yvar; if this\n      # were a base graphics plot, we'd need those.\n      test <- input$plot1_click\n      test2 <-  nearPoints(total, input$plot1_click,'Comp.2','Comp.3')\n      test2\n    })\n    \n    output$brush_info <- renderDataTable({\n      ProcessedFilteredData()\n      \n    })\n    \n    ProcessedFilteredData <- reactive({\n      brushedPoints(total, input$plot1_brush,'PC1','PC2')\n      #brushedPoints(total, input$plot1_brush, 'Factor3','Factor2')\n    })\n    \n    output$downloadData <- downloadHandler(\n      filename = function() { \n        paste('score', '.csv', sep='') \n      },\n      content = function(file) {\n        hallo_data <- ProcessedFilteredData()\n        test_data <- hallo_data[1]\n        test_data <- test_data[-c(1)]\n        for ( i in 1:(length(wine)) ) {\n          test_data[names(wine[i])] <- hallo_data[i+1]\n        }\n        write.csv(test_data, file,row.names = FALSE)\n      }\n    )\n  \n    names <- list(\"A\"=1, \"B\"=2, \"C\"=3, \"D\"=4, \"E\"=5, \"F\"=6, \"G\"=7, \"H\"=8, \"I\"=9)\n  \n  \n  output$plot1 <- renderPlot({\n    #m_X4 =lm(mpg ~ wt , data = mtcars2)\n    #ggplot(mtcars2, aes(wt, mpg)) + geom_point() + geom_abline(intercept=m_X4$coefficients[1], slope=m_X4$coefficients[2] )\n    \n    \n    \n    \n    wine.prc <- prcomp(wine, scale. = TRUE)\n    tmp_data <- as.data.frame(wine.prc$x)\n    total<- merge(wine,tmp_data, by=\"row.names\")\n    \n    wine.pca <- pcaCoDa(wine)\n    tmp_data <- as.data.frame(wine.pca$princompOutputClr$scores)\n    total<- merge(wine,tmp_data, by=\"row.names\")\n    \n    #ggbiplot(wine.prc, obs.scale = 1, var.scale = 1,groups = wine.class ) \n    #ggbiplot(wine.pca$princompOutputClr)\n    wine.pca$princompOutputClr$scale <- NULL\n    wine.pca$princompOutputClr$center <- NULL\n    \n    biplot <- autoplot(wine.pca$princompOutputClr, data = total,loadings = TRUE, loadings.colour = 'blue',loadings.label = TRUE, loadings.label.size = 3)\n    biplot <- biplot + aes( Comp.2, Comp.3)\n    biplot\n    \n    #autoplot(tmp, data = total,loadings = TRUE, loadings.colour = 'blue',loadings.label = TRUE, loadings.label.size = 3)  + aes(Factor3,Factor2)\n    #p <- switch(input$plot_scaletype,\n    #            normal =\n    #              biPlot,\n    #            log10 =\n    #              biPlot + scale_y_log10())\n    #p\n    \n    #ggplot(USArrests, aes(Murder, Assault)) + geom_point()\n    #plot1 <- plot(prcomp(USArrests,scale=TRUE), type = 'l')\n  })\n  \n  })\n  \n  \n\n  \n  }\n\nshinyApp(ui, server)\n",
    "created" : 1435226853714.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1285379588",
    "id" : "D9159D50",
    "lastKnownWriteTime" : 1446481920,
    "path" : "C:/Users/Jakob/shiny/Tests/shiny-examples-master/104-plot-interaction-select/app.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}